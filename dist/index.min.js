(function(g,f){typeof exports==='object'&&typeof module!=='undefined'?f(exports,require('tslib')):typeof define==='function'&&define.amd?define(['exports','tslib'],f):(g=g||self,f(g.immunity={},g.tslib));}(this,function(exports, tslib){'use strict';tslib=tslib&&tslib.hasOwnProperty('default')?tslib['default']:tslib;function appendToArray(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return instance.concat(values);
}function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}var objectAssign_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

function objectAssignPolyfill(target) {
    var e_1, _a, e_2, _b;
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    try {
        for (var sources_1 = tslib.__values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
            var source = sources_1_1.value;
            if (source === null || source === undefined) {
                continue;
            }
            try {
                for (var _c = (e_2 = void 0, tslib.__values(Object.getOwnPropertyNames(source))), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var key = _d.value;
                    target[key] = source[key];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return target;
}
exports.objectAssignPolyfill = objectAssignPolyfill;
var objectAssign = (Object.hasOwnProperty('assign') ? Object.assign : objectAssignPolyfill);
exports.default = objectAssign;

});

var objectAssign = unwrapExports(objectAssign_1);
var objectAssign_2 = objectAssign_1.objectAssignPolyfill;function appendToObject(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return objectAssign.apply(void 0, [{}, instance].concat(values));
}function copy(instance) {
    var Type = instance.constructor;
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a, _b;
        if (!(instance[itemKey] instanceof Function) && (instance[itemKey] instanceof Object)) {
            return objectAssign(new Type(), obj, (_a = {},
                _a[itemKey] = copy(instance[itemKey]),
                _a));
        }
        return objectAssign(new Type(), obj, (_b = {},
            _b[itemKey] = instance[itemKey],
            _b));
    }, new Type());
}function dropFromArray(instance, n) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    return arrInstance.slice(n);
}function dropFromObject(instance, n) {
    var index = 0;
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (n > index) {
            index += 1;
            return obj;
        }
        return objectAssign({}, obj, (_a = {},
            _a[itemKey] = instance[itemKey],
            _a));
    }, {});
}function filterArray(instance, predicate) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    return arrInstance.filter(predicate);
}function filterObject(instance, predicate) {
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (predicate(instance[itemKey], itemKey, obj)) {
            return objectAssign({}, obj, (_a = {},
                _a[itemKey] = instance[itemKey],
                _a));
        }
        return obj;
    }, {});
}function mapArray(instance, predicate) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    return arrInstance.map(predicate);
}function mapObject(instance, predicate) {
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var value = predicate(instance[itemKey], itemKey, obj);
        if (value !== null) {
            return objectAssign({}, obj, value);
        }
        return obj;
    }, {});
}function mergeArrays() {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i] = arguments[_i];
    }
    return arrays.reduce(function (obj, array) { return obj.concat(array); }, []);
}function mergeObjects() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    return objectAssign.apply(void 0, [{}].concat(objects));
}function pickFromArray(instance, items) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    var arrItems = (items.constructor === Array) ?
        items : items.slice();
    return arrInstance.reduce(function (obj, itemValue, itemKey) {
        if (arrItems.indexOf(itemValue) !== -1) {
            return {
                items: obj.items.concat([itemValue]),
                rest: obj.rest
            };
        }
        return {
            items: obj.items,
            rest: obj.rest.concat([itemValue])
        };
    }, {
        items: [],
        rest: []
    });
}function pickFromObject(instance, items) {
    var keys = Object.keys(instance);
    return keys.reduce(function (obj, itemKey) {
        var _a, _b;
        if (items.indexOf(itemKey) !== -1) {
            return {
                items: objectAssign({}, obj.items, (_a = {}, _a[itemKey] = instance[itemKey], _a)),
                rest: obj.rest
            };
        }
        return {
            items: obj.items,
            rest: objectAssign({}, obj.rest, (_b = {}, _b[itemKey] = instance[itemKey], _b))
        };
    }, {
        items: {},
        rest: {}
    });
}function prependToArray(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return values.concat(instance);
}function prependToObject(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return objectAssign.apply(void 0, [{}].concat(values, [instance]));
}function removeFirstMatchFromArray(instance, predicate) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    var notFound = true;
    return arrInstance.filter(function (itemValue, itemKey, obj) {
        if (notFound && predicate(itemValue, itemKey, obj)) {
            notFound = false;
            return false;
        }
        return true;
    });
}function removeFirstMatchFromObject(instance, predicate) {
    var notFound = true;
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (notFound && predicate(instance[itemKey], itemKey, obj)) {
            notFound = false;
            return obj;
        }
        return objectAssign({}, obj, (_a = {},
            _a[itemKey] = instance[itemKey],
            _a));
    }, {});
}function removeFromArray(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    return arrInstance.filter(function (item) { return values.indexOf(item) === -1; });
}function removeKeyFromObject(instance) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (keys.indexOf(itemKey) === -1) {
            return objectAssign({}, obj, (_a = {},
                _a[itemKey] = instance[itemKey],
                _a));
        }
        return obj;
    }, {});
}function removeValueFromObject(instance) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (values.indexOf(instance[itemKey]) === -1) {
            return objectAssign({}, obj, (_a = {},
                _a[itemKey] = instance[itemKey],
                _a));
        }
        return obj;
    }, {});
}function splitArray(instance, n) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    // take n items
    return {
        items: arrInstance.slice(0, n),
        rest: arrInstance.slice(n)
    };
}function splitObject(instance, n) {
    var keys = Object.keys(instance);
    var index = 0;
    return keys.reduce(function (obj, itemKey) {
        var _a, _b;
        if (index < n) {
            index += 1;
            return {
                items: objectAssign({}, obj.items, (_a = {}, _a[itemKey] = instance[itemKey], _a)),
                rest: obj.rest
            };
        }
        return {
            items: obj.items,
            rest: objectAssign({}, obj.rest, (_b = {}, _b[itemKey] = instance[itemKey], _b))
        };
    }, {
        items: {},
        rest: {}
    });
}function takeFromArray(instance, n) {
    var arrInstance = (instance.constructor === Array) ?
        instance : instance.slice();
    return arrInstance.slice(0, n);
}function takeFromObject(instance, n) {
    var index = 0;
    return Object.keys(instance).reduce(function (obj, itemKey) {
        var _a;
        if (index < n) {
            index += 1;
            return objectAssign({}, obj, (_a = {}, _a[itemKey] = instance[itemKey], _a));
        }
        return obj;
    }, {});
}exports.appendToArray=appendToArray;exports.appendToObject=appendToObject;exports.copy=copy;exports.dropFromArray=dropFromArray;exports.dropFromObject=dropFromObject;exports.filterArray=filterArray;exports.filterObject=filterObject;exports.mapArray=mapArray;exports.mapObject=mapObject;exports.mergeArrays=mergeArrays;exports.mergeObjects=mergeObjects;exports.pickFromArray=pickFromArray;exports.pickFromObject=pickFromObject;exports.prependToArray=prependToArray;exports.prependToObject=prependToObject;exports.removeFirstMatchFromArray=removeFirstMatchFromArray;exports.removeFirstMatchFromObject=removeFirstMatchFromObject;exports.removeFromArray=removeFromArray;exports.removeKeyFromObject=removeKeyFromObject;exports.removeValueFromObject=removeValueFromObject;exports.splitArray=splitArray;exports.splitObject=splitObject;exports.takeFromArray=takeFromArray;exports.takeFromObject=takeFromObject;Object.defineProperty(exports,'__esModule',{value:true});}));//# sourceMappingURL=index.min.js.map
